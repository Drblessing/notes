#!/usr/bin/env python3
# Open daily brief of websites in browser.
import webbrowser
import argparse
from enum import Enum
from dataclasses import dataclass
import os


@dataclass
class ContentCategory:
    """Class for storing content categories."""

    name: str
    urls: list[str]


@dataclass
class ContentCollection:
    """Class for storing multiplte content categories."""

    categories: dict[str, ContentCategory]


CONTENT_DAILY = ContentCategory(
    name="Daily",
    urls=[
        "https://gmail.com",
        "https://www.icloud.com/calendar/",
        "https://www.notion.so/",
        "https://web.telegram.org/",
        "https://discord.com/app",
        "https://www.linkedin.com/",
        "https://www.twitter.com/",
        "https://www.fiverr.com/",
        "https://www.upwork.com/",
        "https://chat.openai.com/",
    ],
)


CONTENT_INFO = ContentCategory(
    name="Info",
    urls=[
        "https://companiesmarketcap.com/assets-by-market-cap/",
        "https://www.coingecko.com/",
        "https://github.com/trending",
        "https://cryptofees.info/",
        "https://eigenphi.io/",
        "https://cryptocurrencyalerting.com/coin-listing-events.html",
        "https://transparency.flashbots.net/",
        "https://twitter.com/CoinbaseAssets",
        "https://ultrasound.money/",
        "https://clientdiversity.org/#distribution",
        "https://defillama.com/",
        "https://www.google.com/finance/quote/SCHW:NYSE",
    ],
)

CONTENT_NEWS = ContentCategory(
    name="News",
    urls=[
        "https://rekt.news",
        "https://weekinethereumnews.com/",
        "https://www.xda-developers.com/",
        "https://www.visualcapitalist.com",
        "https://physicsworld.com",
        "https://4chan.org/biz",
        "https://4chan.org/g/",
        "https://www.investopedia.com",
        "https://instapundit.com/",
        "https://zerohedge.com/",
        "https://www.cato.org",
        "https://www.n4g.com",
        "https://pcgamer.com",
    ],
)

CONTENT_BLOGS = ContentCategory(
    name="Blogs",
    urls=[
        "https://dbless.dev",
        "https://cmichel.io",
        "https://simonelnahas.com/",
        "https://www.saianeesh.com/",
        "https://hackernoon.com/exit-liquidity",
    ],
)

CONTENT_AI = ContentCategory(
    name="AI",
    urls=[
        "https://chat.openai.com/",
        "https://bard.google.com/",
        # Also opens Bing Chat in the edge browser.
    ],
)

CONTENT_BORED = ContentCategory(
    name="Bored",
    urls=[
        "https://web.telegram.org/",
        "https://discord.com/app",
        "https://www.twitter.com/",
    ],
)


class DailyBrief:
    """Opens different content in the browser."""

    CONTENT_COLLECTION = ContentCollection(
        categories={
            "daily": CONTENT_DAILY,
            "info": CONTENT_INFO,
            "news": CONTENT_NEWS,
            "blogs": CONTENT_BLOGS,
            "ai": CONTENT_AI,
            "bored": CONTENT_BORED,
        }
    )

    def parse_args(self):
        """Parse arguments"""
        parser = argparse.ArgumentParser(
            description="A python script that opens a daily brief of cool stuff in the browser."
        )

        parser.add_argument(
            "--version",
            "-v",
            action="version",
            version="%(prog)s 1.0",
            help="Show program's version number and exit.",
        )

        # Add category argument
        parser.add_argument(
            "--category",
            "-c",
            choices=self.CONTENT_COLLECTION.categories.keys(),
            default="daily",
            help="Choose a category.",
        )

        args = parser.parse_args()
        self.category = args.category

        return args

    def __init__(self):
        """Initializes the DailyBrief class."""
        self.parse_args()
        self.open_category()

    @staticmethod
    def open_list(list):
        """Opens a list of urls in the browser."""
        for url in list:
            webbrowser.open_new_tab(url)

    def open_category(self):
        """Opens a category of urls in the browser."""
        category = self.CONTENT_COLLECTION.categories[self.category]
        self.open_list(category.urls)

        # Open Bing Chat in the edge browser.
        if self.category == "ai":
            os.system('open -a "Microsoft Edge" https://www.bing.com/chat')


if __name__ == "__main__":
    daily_brief = DailyBrief()
